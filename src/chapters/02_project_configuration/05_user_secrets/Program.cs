using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace UserSecretsApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host
                .CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((hostingContext, config) =>
                {
                    // Introduction:
                    // User secrets are a way to store sensitive data such as API keys, connection strings, and other secrets during development.
                    // They are stored in a separate location outside of your source code and are not checked into source control.

                    // Understanding User Secrets:
                    // User secrets are stored in a JSON file in the user profile directory.
                    // They can be accessed by your application at runtime and are specific to the development environment.

                    // Benefits of Using User Secrets:
                    // - Security: Keeps sensitive data out of your source code and source control.
                    // - Convenience: Easily manage sensitive data during development without modifying your application code.

                    // User secrets are stored in a JSON file in the user profile directory.
                    // The file is named secrets.json and is located in the {user}/AppData/Roaming/Microsoft/UserSecrets/{userSecretsId} directory (for Windows).
                    // The userSecretsId is a unique identifier to map the secrets to the project.
                    // The userSecretsId is generated by the .NET CLI when you run the 'dotnet user-secrets init' command.
                    // From hereon one can add secrets to the secrets.json file using the 'dotnet user-secrets set {key} {value}' command.
                    // The secrets can be accessed in the application using the IConfiguration interface.

                    // Add user secrets configuration
                    config.AddUserSecrets<Program>();
                })
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }

    public class Startup
    {
        private readonly IConfiguration _configuration;

        public Startup(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILogger<Startup> logger)
        {
            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/", async context =>
                {
                    // Read user secret directly from IConfiguration interface
                    var mySecret = _configuration["MySecret"];
                    await context.Response.WriteAsync($"User Secret MySecret: {mySecret}");
                });
            });
        }
    }
}